@startuml TermMaxVaultV2 afterSwap Integration

participant User
participant TermMaxOrderV2
participant TermMaxVaultV2 as "TermMaxVaultV2\n(OrderManagerV2)"
participant Pool as "IERC4626 Pool"
participant Market as "TermMaxMarket"
participant DebtToken
participant FT as "Future Token"
participant XT as "Extension Token"

note over User, XT: User initiates a swap operation on an order managed by TermMaxVaultV2

User -> TermMaxOrderV2: swapTokenToExactToken(tokenIn, tokenOut, recipient, tokenAmtOut, maxTokenIn, deadline)

note over TermMaxOrderV2: Order performs swap calculation and execution
TermMaxOrderV2 -> TermMaxOrderV2: Calculate swap (netTokenIn, feeAmt, deltaFt, deltaXt)
TermMaxOrderV2 -> TermMaxOrderV2: Execute token transfers
TermMaxOrderV2 -> TermMaxOrderV2: Update internal reserves

note over TermMaxOrderV2: Trigger afterSwap callback to TermMaxVaultV2
TermMaxOrderV2 -> TermMaxVaultV2: afterSwap(ftReserve, xtReserve, deltaFt, deltaXt)

note over TermMaxVaultV2: Vault validates the calling order
TermMaxVaultV2 -> TermMaxVaultV2: Check orderMaturityMapping[msg.sender] != 0
TermMaxVaultV2 -> TermMaxVaultV2: Ensure order is authorized

note over TermMaxVaultV2: Accrue interest up to current time
TermMaxVaultV2 -> TermMaxVaultV2: _accruedInterest()
TermMaxVaultV2 -> TermMaxVaultV2: Calculate interest from lastUpdateTime to now
TermMaxVaultV2 -> TermMaxVaultV2: Update _accretingPrincipal and _performanceFee

note over TermMaxVaultV2: Process FT changes and update vault metrics
alt deltaFt > 0 (FT increases - profit scenario)
    TermMaxVaultV2 -> TermMaxVaultV2: ftChanges = deltaFt * DECIMAL_BASE_SQ
    TermMaxVaultV2 -> TermMaxVaultV2: _totalFt += ftChanges
    TermMaxVaultV2 -> TermMaxVaultV2: Calculate deltaAnnualizedInterest = (ftChanges * 365 days) / (maturity - now)
    TermMaxVaultV2 -> TermMaxVaultV2: _maturityToInterest[maturity] += deltaAnnualizedInterest
    TermMaxVaultV2 -> TermMaxVaultV2: _annualizedInterest += deltaAnnualizedInterest
    
    note over TermMaxVaultV2: Handle XT liquidity shortage
    opt finalXtReserve < 0 (need to release XT liquidity)
        TermMaxVaultV2 -> TermMaxVaultV2: _releaseLiquidity(order, asset, shortfallAmount)
        alt Pool exists
            TermMaxVaultV2 -> Pool: withdraw(shortfallAmount, this, this)
            Pool --> TermMaxVaultV2: Return debt tokens
        end
        TermMaxVaultV2 -> DebtToken: safeIncreaseAllowance(market, shortfallAmount)
        TermMaxVaultV2 -> Market: mint(address(order), shortfallAmount)
        Market --> TermMaxOrderV2: Mint FT and XT tokens to order
    end

else deltaFt < 0 (FT decreases - loss scenario)
    TermMaxVaultV2 -> TermMaxVaultV2: ftChanges = (-deltaFt) * DECIMAL_BASE_SQ
    TermMaxVaultV2 -> TermMaxVaultV2: Validate ftReserve >= xtReserve (no negative interest)
    TermMaxVaultV2 -> TermMaxVaultV2: _totalFt -= ftChanges
    TermMaxVaultV2 -> TermMaxVaultV2: Calculate deltaAnnualizedInterest = (ftChanges * 365 days) / (maturity - now)
    TermMaxVaultV2 -> TermMaxVaultV2: _maturityToInterest[maturity] -= deltaAnnualizedInterest
    TermMaxVaultV2 -> TermMaxVaultV2: _annualizedInterest -= deltaAnnualizedInterest
    TermMaxVaultV2 -> TermMaxVaultV2: _checkApy() - Ensure minimum APY is maintained
    
    note over TermMaxVaultV2: Handle FT liquidity shortage
    opt finalFtReserve < 0 (need to release FT liquidity)
        TermMaxVaultV2 -> TermMaxVaultV2: _releaseLiquidity(order, asset, shortfallAmount)
        alt Pool exists
            TermMaxVaultV2 -> Pool: withdraw(shortfallAmount, this, this)
            Pool --> TermMaxVaultV2: Return debt tokens
        end
        TermMaxVaultV2 -> DebtToken: safeIncreaseAllowance(market, shortfallAmount)
        TermMaxVaultV2 -> Market: mint(address(order), shortfallAmount)
        Market --> TermMaxOrderV2: Mint FT and XT tokens to order
    end
end

note over TermMaxVaultV2: Final validation and cleanup
TermMaxVaultV2 -> TermMaxVaultV2: _checkLockedFt()
note right: Ensure _accretingPrincipal + _performanceFee <= _totalFt

TermMaxVaultV2 --> TermMaxOrderV2: Callback completed

note over TermMaxOrderV2: Order completes swap execution
TermMaxOrderV2 -> TermMaxOrderV2: emit SwapTokenToExactToken(...)
TermMaxOrderV2 --> User: Return netTokenIn

note over TermMaxVaultV2: Vault state updated with new APY and interest calculations
note over TermMaxVaultV2: Dynamic yield optimization achieved through real-time adjustments

@enduml